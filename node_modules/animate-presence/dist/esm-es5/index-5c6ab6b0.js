var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
import './presence-handler-a532ff81.js';
var presence = function (element, hooks) {
    if (hooks === void 0) { hooks = {}; }
    var afterSelf = hooks.afterSelf;
    return new Promise(function (resolve) { return __awaiter(void 0, void 0, void 0, function () {
        // }
        function listen(name) {
            element.addEventListener(name + "end", onEnd(name));
        }
        function onEnd(name) {
            return function (event) {
                var _a;
                if (event.target !== element)
                    return;
                element.removeEventListener(name + "end", this);
                (_a = afterSelf) === null || _a === void 0 ? void 0 : _a();
                resolve();
                return;
            };
        }
        var _a, mo, _b, animationName, animationDuration, transitionDuration;
        return __generator(this, function (_c) {
            if (typeof element.dataset.hold !== 'undefined' &&
                'MutationObserver' in window) {
                mo = new MutationObserver(function (_b) {
                    var record = _b[0];
                    var _a;
                    if (typeof record.target.dataset.hold === 'undefined') {
                        (_a = afterSelf) === null || _a === void 0 ? void 0 : _a();
                        resolve();
                    }
                });
                mo.observe(element, {
                    attributeFilter: ['data-hold'],
                    attributes: true,
                });
                return [2 /*return*/];
            }
            // If WAAPI getAnimations exists, use that
            if (typeof element.getAnimations !== 'undefined') {
                Promise.all(element.getAnimations().map(function (anim) { return anim.finished; })).then(function () {
                    var _a;
                    (_a = afterSelf) === null || _a === void 0 ? void 0 : _a();
                    resolve();
                    return;
                });
            }
            else {
                _b = window.getComputedStyle(element), animationName = _b.animationName, animationDuration = _b.animationDuration, transitionDuration = _b.transitionDuration;
                if (animationName !== 'none' && animationDuration !== '0s') {
                    listen('animation');
                }
                else if (transitionDuration !== '0s') {
                    listen('transition');
                }
                else {
                    (_a = afterSelf) === null || _a === void 0 ? void 0 : _a();
                    resolve();
                }
            }
            return [2 /*return*/];
        });
    }); });
};
var kebab = function (str) { return str.replace(/([A-Z])/g, "-$1").toLowerCase(); };
var setCustomProperties = function (el, props) {
    var customProps = convertToCustomProperties(props);
    for (var _i = 0, _b = Object.entries(customProps); _i < _b.length; _i++) {
        var _c = _b[_i], key = _c[0], value = _c[1];
        el.style.setProperty(key, value);
    }
};
var convertToCustomProperties = function (o, prefix, result) {
    if (prefix === void 0) { prefix = '--'; }
    if (result === void 0) { result = {}; }
    if (o == null)
        return result;
    switch (typeof o) {
        case 'string': {
            result[kebab(prefix)] = o;
            return result;
        }
        case 'number': {
            result[kebab(prefix)] = o.toString(10);
            return result;
        }
        case 'boolean': {
            result[kebab(prefix)] = o ? "1" : "0";
            return result;
        }
    }
    if (Array.isArray(o) || typeof o === 'object') {
        for (var _i = 0, _b = Object.entries(o); _i < _b.length; _i++) {
            var _c = _b[_i], key = _c[0], value = _c[1];
            var name = [prefix, !prefix.endsWith('-') && '-', key]
                .filter(Boolean)
                .join('');
            convertToCustomProperties(value, name, result);
        }
        return result;
    }
    return result;
};
var isHTMLElement = function (node) { return node &&
    node.nodeType === node.ELEMENT_NODE &&
    typeof node.tagName !== 'undefined'; };
var hasData = function (el, key) { return typeof el.dataset[key] !== 'undefined'; };
function closest(selector, base) {
    if (base === void 0) { base = this; }
    try {
        function closestFrom(el) {
            if (!el || el === document || el === window)
                return null;
            var found = el.closest(selector);
            return found
                ? found
                : closestFrom(el.getRootNode().host);
        }
        return closestFrom(base);
    }
    catch (e) {
        return null;
    }
}
var getTopLevelChildren = function (el) {
    var all = Array.from(el.querySelectorAll('animate-presence'));
    var nested = Array.from(el.querySelectorAll(':scope animate-presence animate-presence'));
    return all.filter(function (el) { return !nested.includes(el); });
};
var exitChildren = function (el) { return __awaiter(void 0, void 0, void 0, function () {
    return __generator(this, function (_b) {
        return [2 /*return*/, Promise.all(getTopLevelChildren(el).map(function (el) { return el.exit(); }))];
    });
}); };
var enterChildren = function (el) { return __awaiter(void 0, void 0, void 0, function () {
    return __generator(this, function (_b) {
        return [2 /*return*/, Promise.all(getTopLevelChildren(el).map(function (el) { return el.enter(); }))];
    });
}); };
var injectGlobalStyle = function () {
    var ss = document.head.querySelector('[data-ap-global]');
    if (ss)
        return;
    ss = document.createElement('style');
    ss.dataset.apGlobal = '';
    ss.textContent = "animate-presence>[data-enter][style*=\"--i:\"],animate-presence>[data-exit][style*=\"--i:\"]{animation-fill-mode:both;}";
    document.head.appendChild(ss);
};
export { exitChildren as a, isHTMLElement as b, closest as c, enterChildren as e, hasData as h, injectGlobalStyle as i, presence as p, setCustomProperties as s };
