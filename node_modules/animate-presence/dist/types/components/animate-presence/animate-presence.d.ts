import { EventEmitter } from '../../stencil.core';
export declare class AnimatePresence {
    element: HTMLAnimatePresenceElement;
    /** @internal */
    __presenceKey: string;
    /** @internal */
    descendants: HTMLAnimatePresenceElement[];
    private ancestor;
    /**
     * If `true` (default), a MutationObserver will automatically be connected to enable animations when a child node enters/exits.
     *
     * If you know the children are static (typical `animated-route-switch` use case), `false` may improve performance.
     *
     * Note: `<animate-presence>` elements which are children of a parent `<animate-presence>` element will inherit this value,
     *
     * which means MutationObservers can be disabled for the entire tree by setting `observe={false}` on the top-level element.
     *
     * However, directly set values always take precedence over inherited values.
     */
    observe: boolean;
    observeChanged(): void;
    private mo;
    private getClosestParent;
    constructor();
    componentWillLoad(): Promise<void>;
    componentDidLoad(): Promise<void>;
    componentDidUnload(): Promise<void>;
    private enterNode;
    private exitNode;
    private handleEnter;
    private handleExit;
    private handleMutation;
    private addMO;
    private removeMO;
    /** @internal Registers a child element across shadow boundaries */
    registerChild(el: HTMLAnimatePresenceElement): Promise<void>;
    /** @internal */
    unregisterChild(key: string): Promise<void>;
    /**
     * Fires when all exiting nodes have completed animating out.
     *
     * To simplify listener behavior, this event bubbles, but never beyond the closest `<animate-presence>` parent.
     */
    animatePresenceExitComplete: EventEmitter<void>;
    /**
     * Dispatched on a child when it enters. `event.target` is the entering child element.
     *
     * It is recommended to use an animation handler created with `createPresenceHandler` for this event.
     */
    animatePresenceEnter: EventEmitter<{
        i: number;
    }>;
    /**
     * Dispatched on a child when it exits. `event.target` is the exiting child element.
     *
     * It is recommended to use an animation handler created with `createPresenceHandler` for this event.
     */
    animatePresenceExit: EventEmitter<{
        i: number;
    }>;
    private willExit;
    private didExit;
    protected animatePresenceExitCompleteHandler(event: CustomEvent): void;
    /**
     * Programmatically triggers an exit.
     *
     * Nested `<animate-presence>` children will be animated out from the bottom up, meaning that children elements trigger a parent's exit after their own exit finishes.
     */
    exit(): Promise<void>;
    private willEnter;
    private didEnter;
    /**
     * Programmatically triggers an entrance.
     *
     * Nested `<animate-presence>` children will be animated in from the top down, meaning that parent elements trigger a child's entrance after their own entrance finishes.
     */
    enter(): Promise<void>;
    render(): any;
}
